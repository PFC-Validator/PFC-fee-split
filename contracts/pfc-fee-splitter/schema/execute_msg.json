{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "what other contracts will call to start the fly-wheel or fee distribution",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "flush"
          ],
          "properties": {
            "flush": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_allocation_detail"
      ],
      "properties": {
        "add_allocation_detail": {
          "type": "object",
          "required": [
            "allocation",
            "contract",
            "name",
            "send_after",
            "send_type"
          ],
          "properties": {
            "allocation": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "contract": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "send_after": {
              "$ref": "#/definitions/Coin"
            },
            "send_type": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "modify_allocation_detail"
      ],
      "properties": {
        "modify_allocation_detail": {
          "type": "object",
          "required": [
            "allocation",
            "contract",
            "name",
            "send_after",
            "send_type"
          ],
          "properties": {
            "allocation": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "contract": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "send_after": {
              "$ref": "#/definitions/Coin"
            },
            "send_type": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes the 'fee', sending whatever balance is there over",
      "type": "object",
      "required": [
        "remove_allocation_detail"
      ],
      "properties": {
        "remove_allocation_detail": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Queries tokens held, and then re-assigns them to allocations, wiping out whatever was there",
      "type": "object",
      "required": [
        "reconcile"
      ],
      "properties": {
        "reconcile": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Change the governance contract (must be called by current gov_contract)",
      "type": "object",
      "required": [
        "update_governance_contract"
      ],
      "properties": {
        "update_governance_contract": {
          "type": "object",
          "required": [
            "gov_contract"
          ],
          "properties": {
            "gov_contract": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
